{"version":3,"file":"index.js","sources":["../../../../../src/store/fvtt/settings/array-object/FVTTObjectEntryStore.ts","../../../../../src/store/fvtt/settings/array-object/GameSettingArrayObject.ts"],"sourcesContent":["import { ObjectEntryStore }            from '#runtime/svelte/store/reducer/array-object';\n\nimport type { GameSettingArrayObject } from './GameSettingArrayObject';\n\n/**\n * Provides an extension to {@link #runtime/svelte/store/reducer/array-object!ObjectEntryStore} adding the\n * {@link FVTTObjectEntryStore.canUserEdit} accessor which when paired with {@link GameSettingArrayObject} forwards on\n * whether the current Foundry user can edit / save to the Foundry DB.\n *\n * This is the base {@link ObjectEntryStore} available from a direct import or through\n * {@link GameSettingArrayObject.EntryStore} accessor.\n */\nexport abstract class FVTTObjectEntryStore<T extends GameSettingArrayObject.Data.BaseArrayObject =\n GameSettingArrayObject.Data.BaseArrayObject> extends ObjectEntryStore<T>\n{\n   readonly #canUserEdit: boolean;\n\n   /**\n    * @param data - Initial entry data.\n    *\n    * @param [gameSettingArrayObject] - Associated backing array object store. Automatically passed on entry creation\n    *        by {@link #runtime/svelte/store/reducer/array-object!ArrayObjectStore}.\n    */\n   constructor(data: T, gameSettingArrayObject?: GameSettingArrayObject<any>)\n   {\n      super(data);\n\n      this.#canUserEdit = gameSettingArrayObject?.canUserEdit ?? true;\n   }\n\n   /**\n    * Can the current user edit / save this instance to the Foundry DB.\n    */\n   get canUserEdit(): boolean\n   {\n      return this.#canUserEdit;\n   }\n}\n","import { CrudArrayObjectStore }  from '#runtime/svelte/store/reducer/array-object';\r\nimport { Hashing }               from '#runtime/util';\r\nimport { isObject }              from '#runtime/util/object';\r\n\r\nimport { FVTTObjectEntryStore }  from './FVTTObjectEntryStore';\r\n\r\nimport type { TJSGameSettings }  from '#svelte-fvtt/store/fvtt/settings';\r\n\r\n/**\r\n * Defines a {@link CrudArrayObjectStore} with streamlined configuration through {@link TJSGameSettings} to register\r\n * a `world` or `user` game setting. `GameSettingArrayObject` is automatically associated as the store receiving\r\n * updates with the associated game setting.\r\n *\r\n * @typeParam S - Store type.\r\n */\r\nclass GameSettingArrayObject<S extends GameSettingArrayObject.Data.BaseObjectEntryStore<any>> extends\r\n CrudArrayObjectStore<S>\r\n{\r\n   /**\r\n    * Game setting `key` field.\r\n    */\r\n   readonly #key: string;\r\n\r\n   /**\r\n    * Game setting `namespace` field.\r\n    */\r\n   readonly #namespace: string;\r\n\r\n   /**\r\n    * Game setting `scope` field.\r\n    */\r\n   readonly #scope: string;\r\n\r\n   /**\r\n    * @returns The default object entry store constructor that can facilitate the creation of the required\r\n    *          {@link GameSettingArrayObject.Options.Config.StoreClass} and generic `T` type parameter.\r\n    */\r\n   static get EntryStore(): typeof FVTTObjectEntryStore { return FVTTObjectEntryStore; }\r\n\r\n   /**\r\n    * @param options - GameSettingArrayObject Options.\r\n    */\r\n   constructor({ namespace, key, scope, defaultData = [], gameSettings, ...rest }:\r\n    GameSettingArrayObject.Options.Config<S>)\r\n   {\r\n      super({\r\n         ...rest,\r\n         extraData: { namespace, key, scope }\r\n      });\r\n\r\n      if (typeof key !== 'string') { throw new TypeError(`'key' is not a string.`); }\r\n      if (typeof namespace !== 'string') { throw new TypeError(`'namespace' is not a string.`); }\r\n      if (typeof scope !== 'string') { throw new TypeError(`'scope' is not a string.`); }\r\n\r\n      if (scope !== 'world' && scope !=='user') { throw new Error(`'scope' must be 'world' or 'user'.`); }\r\n\r\n      this.#namespace = namespace;\r\n      this.#key = key;\r\n      this.#scope = scope;\r\n\r\n      if (!Array.isArray(defaultData)) { throw new TypeError(`'defaultData' is not an array.`); }\r\n\r\n      // Define default `id` if not provided in `defaultData` then create a random `UUIDv4` value.\r\n      for (const entry of defaultData)\r\n      {\r\n         if (!isObject(entry)) { throw new TypeError(`'entry' in 'defaultData' is not an object.`); }\r\n\r\n         if (!Hashing.isUuidv4(entry.id)) { entry.id = Hashing.uuidv4(); }\r\n      }\r\n\r\n      if (gameSettings)\r\n      {\r\n         gameSettings.register({\r\n            namespace,\r\n            key,\r\n            store: this,\r\n            options: {\r\n               scope,\r\n               config: false,\r\n               default: Array.isArray(defaultData) ? defaultData : [],\r\n               type: Array,\r\n               name: key\r\n            }\r\n         });\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Can the current user edit / save this instance to the Foundry DB.\r\n    */\r\n   get canUserEdit(): boolean\r\n   {\r\n      let canUserEdit = false;\r\n\r\n      switch (this.#scope)\r\n      {\r\n         case 'user':\r\n            canUserEdit = true;\r\n            break;\r\n\r\n         case 'world':\r\n            // @ts-ignore - No Foundry types associated in build.\r\n            canUserEdit = globalThis.game.user.isGM;\r\n            break;\r\n      }\r\n\r\n      return canUserEdit;\r\n   }\r\n\r\n   /**\r\n    * @returns The Foundry game setting `key`.\r\n    */\r\n   get key(): string { return this.#key; }\r\n\r\n   /**\r\n    * @returns The Foundry game setting `namespace`.\r\n    */\r\n   get namespace(): string { return this.#namespace; }\r\n\r\n   /**\r\n    * @returns The Foundry game setting `scope`.\r\n    */\r\n   get scope(): string { return this.#scope; }\r\n}\r\n\r\ndeclare namespace GameSettingArrayObject {\r\n   export import Data = CrudArrayObjectStore.Data;\r\n   export import Util = CrudArrayObjectStore.Util;\r\n\r\n   export namespace Options {\r\n      /**\r\n       * @typeParam S - Store type.\r\n       */\r\n      export interface Config<S extends Data.BaseObjectEntryStore<any>> extends CrudArrayObjectStore.Options.Config<S> {\r\n         /**\r\n          * Game setting `namespace` field.\r\n          */\r\n         namespace: string;\r\n\r\n         /**\r\n          * Game setting `key` field.\r\n          */\r\n         key: string;\r\n\r\n         /**\r\n          * Game setting `scope` field. Must be `world` or `user`. For GM only modification w/ readability by all users\r\n          * choose `world`. For unique user private data that can be read / write by a single user choose `user`.\r\n          */\r\n         scope: string;\r\n\r\n         /**\r\n          * When an instance of {@link TJSGameSettings} is defined and automatic game setting registered you may\r\n          * provide default data for the Foundry game setting.\r\n          */\r\n         defaultData?: GameSettingArrayObject.Util.ExtractDataType<S>[];\r\n\r\n         /**\r\n          * An instance of {@link TJSGameSettings}. If provided a user game setting will be automatically registered\r\n          * for the given `namespace`,`key`, and `scope` with this instance as the associated game setting store.\r\n          */\r\n         gameSettings?: TJSGameSettings;\r\n      }\r\n   }\r\n}\r\n\r\nexport { GameSettingArrayObject };\r\n"],"names":[],"mappings":"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"}