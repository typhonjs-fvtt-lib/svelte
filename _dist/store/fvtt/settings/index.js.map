{"version":3,"file":"index.js","sources":["../../../../src/store/fvtt/settings/TJSGameSettings.js","../../../../src/store/fvtt/settings/TJSLiveGameSettings.js"],"sourcesContent":["import { writable }        from '#svelte/store';\r\n\r\nimport {\r\n   isMinimalWritableStore,\r\n   subscribeIgnoreFirst }  from '#runtime/svelte/store/util';\r\n\r\nimport { CrossWindow }     from '#runtime/util/browser';\r\n\r\nimport {\r\n   isIterable,\r\n   isObject }              from '#runtime/util/object';\r\n\r\n/**\r\n * Registers game settings and creates a backing Svelte store for each setting. The Svelte store will update the\r\n * Foundry game settings and vice versa when changes occur to the Foundry game settings the updated data is set to the\r\n * store.\r\n *\r\n * Note: It is possible to add multiple `onChange` callbacks on registration.\r\n *\r\n * @privateRemarks\r\n * TODO: A possible future extension is to offer type checking against the setting type by creating a customized\r\n * writable store that has an overloaded `set` method to provide type checking.\r\n */\r\nexport class TJSGameSettings\r\n{\r\n   /** @type {string} */\r\n   #namespace;\r\n\r\n   /** @type {GameSettingData[]} */\r\n   #settings = [];\r\n\r\n   /**\r\n    * @type {Map<string, import('svelte/store').Writable>}\r\n    */\r\n   #stores = new Map();\r\n\r\n   /**\r\n    * Creates the TJSGameSettings instance.\r\n    *\r\n    * @param {string}   namespace - The namespace for all settings.\r\n    */\r\n   constructor(namespace)\r\n   {\r\n      if (typeof namespace !== 'string') { throw new TypeError(`'namespace' is not a string.`); }\r\n\r\n      this.#namespace = namespace;\r\n   }\r\n\r\n   /**\r\n    * Creates a new writable for the given key.\r\n    *\r\n    * @param {*}  initialValue - An initial value to set to new stores.\r\n    *\r\n    * @returns {import('svelte/store').Writable} The new writable.\r\n    */\r\n   static #createStore(initialValue)\r\n   {\r\n      return writable(initialValue);\r\n   }\r\n\r\n   /**\r\n    * @returns {string} Returns namespace set in constructor.\r\n    */\r\n   get namespace()\r\n   {\r\n      return this.#namespace;\r\n   }\r\n\r\n   /**\r\n    * Gets a store from the `stores` Map or creates a new store for the key.\r\n    *\r\n    * @param {string}   key - Key to lookup in stores map.\r\n    *\r\n    * @param {string}   [initialValue] - An initial value to set to new stores.\r\n    *\r\n    * @returns {import('svelte/store').Writable} The store for the given key.\r\n    */\r\n   #getStore(key, initialValue)\r\n   {\r\n      let store = this.#stores.get(key);\r\n      if (store === void 0)\r\n      {\r\n         store = TJSGameSettings.#createStore(initialValue);\r\n         this.#stores.set(key, store);\r\n      }\r\n\r\n      return store;\r\n   }\r\n\r\n   /**\r\n    * Returns a readable Game Settings store for the associated key.\r\n    *\r\n    * @param {string}   key - Game setting key.\r\n    *\r\n    * @returns {import('svelte/store').Readable | undefined} The associated store for the given game setting key.\r\n    */\r\n   getReadableStore(key)\r\n   {\r\n      if (!this.#stores.has(key))\r\n      {\r\n         console.warn(`TJSGameSettings - getReadableStore: '${key}' is not a registered setting.`);\r\n         return;\r\n      }\r\n\r\n      const store = this.#getStore(key);\r\n\r\n      return { subscribe: store.subscribe };\r\n   }\r\n\r\n   /**\r\n    * Returns a writable Game Settings store for the associated key.\r\n    *\r\n    * @param {string}   key - Game setting key.\r\n    *\r\n    * @returns {import('svelte/store').Writable | undefined} The associated store for the given game setting key.\r\n    */\r\n   getStore(key)\r\n   {\r\n      return this.getWritableStore(key);\r\n   }\r\n\r\n   /**\r\n    * Returns a writable Game Settings store for the associated key.\r\n    *\r\n    * @param {string}   key - Game setting key.\r\n    *\r\n    * @returns {import('svelte/store').Writable | undefined} The associated store for the given game setting key.\r\n    */\r\n   getWritableStore(key)\r\n   {\r\n      if (!this.#stores.has(key))\r\n      {\r\n         console.warn(`TJSGameSettings - getWritableStore: '${key}' is not a registered setting.`);\r\n         return;\r\n      }\r\n\r\n      return this.#getStore(key);\r\n   }\r\n\r\n   /**\r\n    * Registers a setting with TJSGameSettings and Foundry core.\r\n    *\r\n    * Note: The specific store subscription handler assigned to the passed in store or store created for the setting\r\n    * internally is returned from this function. In some cases when setting up custom stores particularly of object\r\n    * types with several child property stores (`propertyStore`) it is necessary to only update the setting store and\r\n    * not all subscribers to the custom store as the `propertyStore` instances are also subscribers to the custom store.\r\n    *\r\n    * This allows the custom store in the `set` implementation to mainly only trigger the TJSGameSettings subscriber\r\n    * handler on updates and not all the connected `propertyStore` instances.\r\n    *\r\n    * @param {GameSetting} setting - A GameSetting instance to set to Foundry game settings.\r\n    *\r\n    * @param {boolean}     coreConfig - When false this overrides the `setting.options.config` parameter when\r\n    *                                   registering the setting with Foundry. This allows the settings to be displayed\r\n    *                                   in the app itself, but removed from the standard Foundry configuration location.\r\n    *\r\n    * @returns {Function} The specific store subscription handler assigned to the passed in store.\r\n    */\r\n   register(setting, coreConfig = true)\r\n   {\r\n      if (!isObject(setting))\r\n      {\r\n         throw new TypeError(`TJSGameSettings - register: setting is not an object.`);\r\n      }\r\n\r\n      if (!isObject(setting.options))\r\n      {\r\n         throw new TypeError(`TJSGameSettings - register: 'setting.options' attribute is not an object.`);\r\n      }\r\n\r\n      if (typeof coreConfig !== 'boolean')\r\n      {\r\n         throw new TypeError(`TJSGameSettings - register: 'coreConfig' is not an boolean.`);\r\n      }\r\n\r\n      if (setting.store !== void 0 && !isMinimalWritableStore(setting.store))\r\n      {\r\n         throw new TypeError(\r\n          `TJSGameSettings - register: 'setting.store' attribute is not a minimal writable store.`);\r\n      }\r\n\r\n      const namespace = setting.namespace;\r\n      const key = setting.key;\r\n      const folder = setting.folder;\r\n\r\n      // The `config` parameter passed to Foundry core.\r\n      const foundryConfig = coreConfig ? setting.options.config : false;\r\n\r\n      if (typeof namespace !== 'string')\r\n      {\r\n         throw new TypeError(`TJSGameSettings - register: 'namespace' attribute is not a string.`);\r\n      }\r\n\r\n      if (typeof key !== 'string')\r\n      {\r\n         throw new TypeError(`TJSGameSettings - register: 'key' attribute is not a string.`);\r\n      }\r\n\r\n      if (folder !== void 0 && typeof folder !== 'string')\r\n      {\r\n         throw new TypeError(`TJSGameSettings - register: 'folder' attribute is not a string.`);\r\n      }\r\n\r\n      const store = setting.store;\r\n\r\n      /**\r\n       * @type {GameSettingOptions}\r\n       */\r\n      const options = setting.options;\r\n\r\n      const onchangeFunctions = [];\r\n\r\n      // When true prevents local store subscription from a loop when values are object data.\r\n      let gateSet = false;\r\n\r\n      // Provides an `onChange` callback to update the associated store.\r\n      onchangeFunctions.push((value) =>\r\n      {\r\n         const callbackStore = this.#getStore(key);\r\n         if (callbackStore && !gateSet)\r\n         {\r\n            gateSet = true;\r\n            callbackStore.set(value);\r\n            gateSet = false;\r\n         }\r\n      });\r\n\r\n      // Handle loading any existing `onChange` callbacks.\r\n      if (isIterable(options?.onChange))\r\n      {\r\n         for (const entry of options.onChange)\r\n         {\r\n            if (typeof entry === 'function') { onchangeFunctions.push(entry); }\r\n         }\r\n      }\r\n      else if (typeof options.onChange === 'function')\r\n      {\r\n         onchangeFunctions.push(options.onChange);\r\n      }\r\n\r\n      // Provides the final onChange callback that iterates over all the stored onChange callbacks.\r\n      const onChange = (value) =>\r\n      {\r\n         for (const entry of onchangeFunctions) { entry(value); }\r\n      };\r\n\r\n      globalThis.game.settings.register(namespace, key, { ...options, config: foundryConfig, onChange });\r\n\r\n      // Set new store value with existing setting or default value.\r\n      const targetStore = store ? store : this.#getStore(key, globalThis.game.settings.get(namespace, key));\r\n\r\n      // If a store instance is passed into register then initialize it with game settings data.\r\n      if (store)\r\n      {\r\n         this.#stores.set(key, targetStore);\r\n         store.set(globalThis.game.settings.get(namespace, key));\r\n      }\r\n\r\n      const storeHandler = async (value) =>\r\n      {\r\n         if (!gateSet)\r\n         {\r\n            gateSet = true;\r\n            await globalThis.game.settings.set(namespace, key, value);\r\n         }\r\n\r\n         gateSet = false;\r\n      };\r\n\r\n      // Subscribe to self to set associated game setting on updates after verifying that the new value does not match\r\n      // existing game setting.\r\n      subscribeIgnoreFirst(targetStore, storeHandler);\r\n\r\n      const gameSettingData = {\r\n         namespace,\r\n         key,\r\n         folder,\r\n         ...options\r\n      };\r\n\r\n      Object.freeze(gameSettingData);\r\n\r\n      this.#settings.push(gameSettingData);\r\n\r\n      return storeHandler;\r\n   }\r\n\r\n   /**\r\n    * Registers multiple settings.\r\n    *\r\n    * Please refer to the note in {@link TJSGameSettings.register} about the returned object of store subscriber handler\r\n    * functions.\r\n    *\r\n    * @param {Iterable<GameSetting>} settings - An iterable list of game setting configurations to register.\r\n    *\r\n    * @param {boolean}     coreConfig - When false this overrides the `setting.options.config` parameter when\r\n    *                                   registering the setting with Foundry. This allows the settings to be displayed\r\n    *                                   in the app itself, but removed from the standard Foundry configuration location.\r\n    *\r\n    * @returns { {[key: string]: Function} } An object containing all TJSGameSetting store subscriber handlers for each\r\n    *          setting `key` added.\r\n    */\r\n   registerAll(settings, coreConfig)\r\n   {\r\n      /** @type { {[key: string]: Function} } */\r\n      const storeHandlers = {};\r\n\r\n      if (!isIterable(settings)) { throw new TypeError(`TJSGameSettings - registerAll: settings is not iterable.`); }\r\n\r\n      for (const entry of settings)\r\n      {\r\n         if (!isObject(entry))\r\n         {\r\n            throw new TypeError(`TJSGameSettings - registerAll: entry in settings is not an object.`);\r\n         }\r\n\r\n         if (typeof entry.namespace !== 'string')\r\n         {\r\n            throw new TypeError(`TJSGameSettings - registerAll: entry in settings missing 'namespace' attribute.`);\r\n         }\r\n\r\n         if (typeof entry.key !== 'string')\r\n         {\r\n            throw new TypeError(`TJSGameSettings - registerAll: entry in settings missing 'key' attribute.`);\r\n         }\r\n\r\n         if (!isObject(entry.options))\r\n         {\r\n            throw new TypeError(`TJSGameSettings - registerAll: entry in settings missing 'options' attribute.`);\r\n         }\r\n\r\n         storeHandlers[entry.key] = this.register(entry, coreConfig);\r\n      }\r\n\r\n      return storeHandlers;\r\n   }\r\n\r\n   // Iterators ------------------------------------------------------------------------------------------------------\r\n\r\n   /**\r\n    * Returns an iterable for the game setting data; {@link GameSettingData}.\r\n    *\r\n    * @param {RegExp} [regex] - Optional regular expression to filter by game setting keys.\r\n    *\r\n    * @returns {IterableIterator<GameSettingData>} Iterable iterator of GameSettingData.\r\n    * @yields {GameSettingData}\r\n    */\r\n   *data(regex = void 0)\r\n   {\r\n      if (regex !== void 0 && !CrossWindow.isRegExp(regex)) { throw new TypeError(`'regex' is not a RegExp`); }\r\n\r\n      if (!this.#settings.length) { return void 0; }\r\n\r\n      if (regex)\r\n      {\r\n         for (const setting of this.#settings)\r\n         {\r\n            if (regex.test(setting.key)) { yield setting; }\r\n         }\r\n      }\r\n      else\r\n      {\r\n         for (const setting of this.#settings) { yield setting; }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @template T\r\n    *\r\n    * Returns an iterable for the game setting keys and stores.\r\n    *\r\n    * @param {RegExp} [regex] - Optional regular expression to filter by game setting keys.\r\n    *\r\n    * @returns {IterableIterator<[string, import('svelte/store').Writable<T>]>} Iterable iterator of keys and stores.\r\n    * @yields {import('svelte/store').Writable<T>}\r\n    */\r\n   *entries(regex = void 0)\r\n   {\r\n      if (regex !== void 0 && !CrossWindow.isRegExp(regex)) { throw new TypeError(`'regex' is not a RegExp`); }\r\n\r\n      if (!this.#stores.size) { return void 0; }\r\n\r\n      if (regex)\r\n      {\r\n         for (const key of this.#stores.keys())\r\n         {\r\n            if (regex.test(key)) { yield [key, this.getStore(key)]; }\r\n         }\r\n      }\r\n      else\r\n      {\r\n         for (const key of this.#stores.keys()) { yield [key, this.getStore(key)]; }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Returns an iterable for the game setting keys from existing stores.\r\n    *\r\n    * @param {RegExp} [regex] - Optional regular expression to filter by game setting keys.\r\n    *\r\n    * @returns {IterableIterator<string>} Iterable iterator of game setting keys.\r\n    * @yields {string}\r\n    */\r\n   *keys(regex = void 0)\r\n   {\r\n      if (regex !== void 0 && !CrossWindow.isRegExp(regex)) { throw new TypeError(`'regex' is not a RegExp`); }\r\n\r\n      if (!this.#stores.size) { return void 0; }\r\n\r\n      if (regex)\r\n      {\r\n         for (const key of this.#stores.keys())\r\n         {\r\n            if (regex.test(key)) { yield key; }\r\n         }\r\n      }\r\n      else\r\n      {\r\n         for (const key of this.#stores.keys()) { yield key; }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @template T\r\n    *\r\n    * Returns an iterable for the game setting stores.\r\n    *\r\n    * @param {RegExp} [regex] - Optional regular expression to filter by game setting keys.\r\n    *\r\n    * @returns {IterableIterator<import('svelte/store').Writable<T>>} Iterable iterator of stores.\r\n    * @yields {import('svelte/store').Writable<T>}\r\n    */\r\n   *stores(regex = void 0)\r\n   {\r\n      if (regex !== void 0 && !CrossWindow.isRegExp(regex)) { throw new TypeError(`'regex' is not a RegExp`); }\r\n\r\n      if (!this.#stores.size) { return void 0; }\r\n\r\n      if (regex)\r\n      {\r\n         for (const key of this.#stores.keys())\r\n         {\r\n            if (regex.test(key)) { yield this.getStore(key); }\r\n         }\r\n      }\r\n      else\r\n      {\r\n         for (const key of this.#stores.keys()) { yield this.getStore(key); }\r\n      }\r\n   }\r\n}\r\n\r\n/**\r\n * @typedef {object} GameSettingOptions\r\n *\r\n * @property {object} [choices] If choices are defined, the resulting setting will be a select menu.\r\n *\r\n * @property {boolean} [config=true] Specifies that the setting appears in the configuration view.\r\n *\r\n * @property {*} [default] A default value for the setting.\r\n *\r\n * @property {string} [hint] A description of the registered setting and its behavior.\r\n *\r\n * @property {string} [name] The displayed name of the setting.\r\n *\r\n * @property {Function|Iterable<Function>} [onChange] An onChange callback function or iterable list of callbacks to\r\n * directly receive callbacks from Foundry on setting change.\r\n *\r\n * @property {{min: number, max: number, step: number}} [range] If range is specified, the resulting setting will be\r\n * a range slider.\r\n *\r\n * @property {boolean} [requiresReload=false] If true then a prompt to reload after changes occurs.\r\n *\r\n * @property {('client' | 'world')} [scope='client'] Scope for setting.\r\n *\r\n * @property {object|Function} type A constructable object or function.\r\n */\r\n\r\n/**\r\n * @typedef {object} GameSetting Defines a game setting.\r\n *\r\n * @property {string} namespace The setting namespace; usually the ID of the module / system.\r\n *\r\n * @property {string} key The setting key to register.\r\n *\r\n * @property {string} [folder] The name of the TJSSvgFolder to put this setting in to group them.\r\n *\r\n * @property {import('svelte/store').Writable} [store] An existing store instance to use.\r\n *\r\n * @property {GameSettingOptions} options Configuration for setting data.\r\n */\r\n\r\n/**\r\n * @typedef {GameSettingOptions} GameSettingData Stores the primary TJS game setting keys w/ GameSettingOptions.\r\n *\r\n * @property {string} namespace The setting namespace; usually the ID of the module / system.\r\n *\r\n * @property {string} key The setting key to register.\r\n *\r\n * @property {string} [folder] The name of the TJSSvgFolder to put this setting in to group them.\r\n */\r\n","import { CrossWindow }     from '#runtime/util/browser';\r\n\r\nimport { TJSGameSettings } from './TJSGameSettings.js';\r\n\r\n/**\r\n * Provides an accessible JS object that is updated reactively from all or subset of TJSGameSettings stores.\r\n * Accessors are provided to directly get / set current setting data. Using a setter will update the setting and backing\r\n * store.\r\n *\r\n * Note: You can create a JSDoc / `@typedef` to apply with `@type` and achieve typing support in IDEs for the\r\n * customizable live settings instance. Please see the example at the end of this source file on how to accomplish this\r\n * task.\r\n *\r\n * TJSLiveGameSettings is also a readable Svelte store essentially providing a customizable derived store of all\r\n * settings tracked.\r\n *\r\n * Note: When using from JS a second subscriber function argument is the key that was updated.\r\n * From Svelte: Use 'lastKey' accessor to retrieve the last updated key.\r\n */\r\nexport class TJSLiveGameSettings\r\n{\r\n   /**\r\n    * Stores the current parsed game setting data.\r\n    *\r\n    * @type {{}}\r\n    */\r\n   #currentData = {};\r\n\r\n   /**\r\n    * Map of all game settings stores and unsubscribe functions currently subscribed.\r\n    *\r\n    * @type {Map<string, { unsubscribe: Function, store: import('svelte/store').Writable }>}\r\n    */\r\n   #gameSettings = new Map();\r\n\r\n   /**\r\n    * Stores readable subscribers of this instance.\r\n    *\r\n    * Note: When using from JS a second argument is the key that was updated.\r\n    * From Svelte: Use 'lastKey' accessor to retrieve the last updated key.\r\n    *\r\n    * @type {((value: TJSLiveGameSettings, key?: string) => void)[]}\r\n    */\r\n   #subscriptions = [];\r\n\r\n   /**\r\n    * Stores the last updated key.\r\n    *\r\n    * @type {string}\r\n    */\r\n   #lastKey = void 0;\r\n\r\n   /**\r\n    * Creates a live binding against the setting stores. All settings are configured by default, but can also be\r\n    * filtered by setting key with inclusive / exclusive Sets.\r\n    *\r\n    * @param {TJSGameSettings}   gameSettings - A game settings instance to subscribe to...\r\n    *\r\n    * @param {object}            [options] - TJSLiveGameSettings options.\r\n    *\r\n    * @param {Set<string>}       [options.include] - A Set of setting keys to include from subscribing.\r\n    *\r\n    * @param {Set<string>}       [options.exclude] - A Set of setting keys to exclude from subscribing.\r\n    */\r\n   constructor(gameSettings, { include, exclude } = {})\r\n   {\r\n      if (!(gameSettings instanceof TJSGameSettings))\r\n      {\r\n         throw new TypeError(`'gameSettings' is not a TJSGameSettings instance.`);\r\n      }\r\n\r\n      if (include !== void 0 && !CrossWindow.isSet(include)) { throw new TypeError(`'options.include' is not a Set.`); }\r\n      if (exclude !== void 0 && !CrossWindow.isSet(exclude)) { throw new TypeError(`'options.exclude' is not a Set.`); }\r\n\r\n      for (const setting of gameSettings.data())\r\n      {\r\n         const key = setting.key;\r\n\r\n         // Skip any keys that are in the include set.\r\n         if (include !== void 0 && !include.has(key)) { continue; }\r\n\r\n         // Skip any keys that are in the exclude set.\r\n         if (exclude !== void 0 && exclude.has(key)) { continue; }\r\n\r\n         if (typeof this[key] === 'function' || key === 'lastKey')\r\n         {\r\n            console.warn(`TJSLiveGameSettings warning: key (${key}) shadows a function. Skipping key.`);\r\n         }\r\n\r\n         const store = gameSettings.getStore(key);\r\n\r\n         // Update this instance storing setting data by key.\r\n         this.#gameSettings.set(key, {\r\n            store,\r\n            unsubscribe: store.subscribe((data) =>\r\n            {\r\n               if (this.#currentData !== void 0) { this.#currentData[key] = data; }\r\n\r\n               this.#lastKey = key;\r\n\r\n               // Notify any child instance that a particular key has updated.\r\n               this._update(key);\r\n\r\n               // Notify any readable store subscribers.\r\n               this.#updateSubscribers(key);\r\n            })\r\n         });\r\n\r\n         // Define new accessors for setting key.\r\n         Object.defineProperty(this, key, {\r\n            get: () =>\r\n            {\r\n               if (this.#currentData === void 0)\r\n               {\r\n                  throw new Error(`This instance of TJSLiveGameSettings has been destroyed.`);\r\n               }\r\n               else\r\n               {\r\n                  return this.#currentData[key];\r\n               }\r\n            },\r\n            set: (data) =>\r\n            {\r\n               if (this.#currentData === void 0)\r\n               {\r\n                  throw new Error(`This instance of TJSLiveGameSettings has been destroyed.`);\r\n               }\r\n               else\r\n               {\r\n                  this.#gameSettings.get(key).store.set(data);\r\n               }\r\n            }\r\n         });\r\n      }\r\n\r\n      Object.seal(this);\r\n   }\r\n\r\n   /**\r\n    * @returns {string} Last updated setting key.\r\n    */\r\n   get lastKey()\r\n   {\r\n      return this.#lastKey;\r\n   }\r\n\r\n   // ----------------------------------------------------------------------------------------------------------------\r\n\r\n   /**\r\n    * Destroys this instance of TJSLiveGameSettings and unsubscribes from all game setting stores.\r\n    */\r\n   destroy()\r\n   {\r\n      for (const data of this.#gameSettings)\r\n      {\r\n         if (typeof data.unsubscribe === 'function') { data.unsubscribe(); }\r\n      }\r\n\r\n      this.#gameSettings.clear();\r\n      this.#currentData = void 0;\r\n   }\r\n\r\n   /**\r\n    * Returns an iterator / generator of all setting entries.\r\n    *\r\n    * @returns {IterableIterator<[key: string, value: any]>} An iterator returning setting entries.\r\n    * @yields {[key: string, value: any]}\r\n    */\r\n   *entries()\r\n   {\r\n      if (this.#currentData === void 0) { throw new Error(`This instance of TJSLiveGameSettings has been destroyed.`); }\r\n\r\n      for (const key in this.#currentData)\r\n      {\r\n         yield [key, this.#currentData[key]];\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Returns an iterator / generator of all setting keys.\r\n    *\r\n    * @returns {IterableIterator<string>} An iterator returning setting keys.\r\n    * @yields {string}\r\n    */\r\n   *keys()\r\n   {\r\n      if (this.#currentData === void 0) { throw new Error(`This instance of TJSLiveGameSettings has been destroyed.`); }\r\n\r\n      for (const key in this.#currentData)\r\n      {\r\n         yield key;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Returns a string / JSON stringify of the current setting data.\r\n    *\r\n    * @returns {string} Tracked setting data.\r\n    */\r\n   toString()\r\n   {\r\n      if (this.#currentData === void 0) { throw new Error(`This instance of TJSLiveGameSettings has been destroyed.`); }\r\n\r\n      return JSON.stringify(this.#currentData);\r\n   }\r\n\r\n   /**\r\n    * Override to respond to setting update.\r\n    *\r\n    * @param {string} key - The setting / local key that updated.\r\n    *\r\n    * @protected\r\n    */\r\n   _update(key) {}   // eslint-disable-line no-unused-vars\r\n\r\n   /**\r\n    * Returns an iterator / generator of all values.\r\n    *\r\n    * @returns {IterableIterator<any>} An iterator returning setting values.\r\n    * @yields {any}\r\n    */\r\n   *values()\r\n   {\r\n      if (this.#currentData === void 0) { throw new Error(`This instance of TJSLiveGameSettings has been destroyed.`); }\r\n\r\n      for (const key in this.#currentData)\r\n      {\r\n         yield this.#currentData[key];\r\n      }\r\n   }\r\n\r\n   // Readable store implementation ----------------------------------------------------------------------------------\r\n\r\n   /**\r\n    * @param {(value: TJSLiveGameSettings, key?: string) => void} handler - Callback function that is invoked on\r\n    * update / changes.\r\n    *\r\n    * @returns {import('svelte/store').Unsubscriber} Unsubscribe function.\r\n    */\r\n   subscribe(handler)\r\n   {\r\n      this.#subscriptions.push(handler); // add handler to the array of subscribers\r\n\r\n      handler(this, void 0);             // call handler with current value\r\n\r\n      // Return unsubscribe function.\r\n      return () =>\r\n      {\r\n         const index = this.#subscriptions.findIndex((sub) => sub === handler);\r\n         if (index >= 0) { this.#subscriptions.splice(index, 1); }\r\n      };\r\n   }\r\n\r\n   /**\r\n    * Updates subscribers.\r\n    *\r\n    * @param {string} key - The key that was updated.\r\n    */\r\n   #updateSubscribers(key)\r\n   {\r\n      const subscriptions = this.#subscriptions;\r\n      for (let cntr = 0; cntr < subscriptions.length; cntr++) { subscriptions[cntr](this, key); }\r\n   }\r\n}\r\n\r\n// Example of creating a typedef to type your specific live game settings instance. Add all relevant `@property`\r\n// entries.\r\n//\r\n// /**\r\n//  * @typedef {TJSLiveGameSettings} MyLiveGameSettings - Extend TJSLiveGameSettings and name this anything.\r\n//  *\r\n//  * @property {boolean} myBooleanSetting - Add property / type entries for setting keys associated w/ accessors.\r\n//  */\r\n//\r\n// /** @type {MyLiveGameSettings} */\r\n// const liveGameSettings = new TJSLiveGameSettings(gameSettings);\r\n// liveGameSettings.myBooleanSetting is now typed as a boolean.\r\n"],"names":[],"mappings":"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"}