{"version":3,"file":"index.js","sources":["../../../../src/store/fvtt/settings/TJSGameSettings.ts","../../../../src/store/fvtt/settings/TJSLiveGameSettings.ts"],"sourcesContent":["import { writable }              from 'svelte/store';\r\n\r\nimport {\r\n   isMinimalWritableStore,\r\n   subscribeIgnoreFirst }        from '#runtime/svelte/store/util';\r\n\r\nimport { CrossWindow }           from '#runtime/util/browser';\r\n\r\nimport {\r\n   isIterable,\r\n   isObject }                    from '#runtime/util/object';\r\n\r\nimport type {\r\n   Readable,\r\n   Writable }                    from 'svelte/store';\r\n\r\nimport type { MinimalWritable }  from '#runtime/svelte/store/util';\r\n\r\n/**\r\n * Registers game settings and creates a backing Svelte store for each setting. The Svelte store will update the\r\n * Foundry game settings and vice versa when changes occur to the Foundry game settings the updated data is set to the\r\n * store.\r\n *\r\n * Note: It is possible to add multiple `onChange` callbacks on registration.\r\n *\r\n * @typeParam `ExtraProps` - Defines additional properties for game setting options / data that child implementations\r\n * may define.\r\n *\r\n * @privateRemarks\r\n * TODO: A possible future extension is to offer type checking against the setting type by creating a customized\r\n * writable store that has an overloaded `set` method to provide type checking.\r\n */\r\nclass TJSGameSettings<ExtraProps extends Record<string, any> = {}>\r\n{\r\n   /**\r\n    */\r\n   readonly #namespace: string;\r\n\r\n   /**\r\n    */\r\n   #settings: TJSGameSettings.Data.GameSetting<ExtraProps>[] = [];\r\n\r\n   /**\r\n    */\r\n   #stores: Map<string, MinimalWritable<any>> = new Map();\r\n\r\n   /**\r\n    * Creates the TJSGameSettings instance.\r\n    *\r\n    * @param namespace - The namespace for all settings.\r\n    */\r\n   constructor(namespace: string)\r\n   {\r\n      if (typeof namespace !== 'string') { throw new TypeError(`'namespace' is not a string.`); }\r\n\r\n      this.#namespace = namespace;\r\n   }\r\n\r\n   /**\r\n    * Creates a new writable for the given key.\r\n    *\r\n    * @param initialValue - An initial value to set to new stores.\r\n    *\r\n    * @returns The new writable.\r\n    */\r\n   static #createStore<T>(initialValue: any): Writable<T>\r\n   {\r\n      return writable(initialValue);\r\n   }\r\n\r\n   /**\r\n    * @returns Returns namespace set in constructor.\r\n    */\r\n   get namespace(): string\r\n   {\r\n      return this.#namespace;\r\n   }\r\n\r\n   /**\r\n    * Gets a store from the `stores` Map or creates a new store for the key.\r\n    *\r\n    * @param key - Key to lookup in stores map.\r\n    *\r\n    * @param [initialValue] - An initial value to set to new stores.\r\n    *\r\n    * @returns The store for the given key.\r\n    */\r\n   #getStore<T>(key: string, initialValue?: any): MinimalWritable<T>\r\n   {\r\n      let store: MinimalWritable<T> | undefined = this.#stores.get(key);\r\n      if (store === void 0)\r\n      {\r\n         store = TJSGameSettings.#createStore(initialValue);\r\n         this.#stores.set(key, store);\r\n      }\r\n\r\n      return store;\r\n   }\r\n\r\n   /**\r\n    * Returns a readable Game Settings store for the associated key.\r\n    *\r\n    * @param key - Game setting key.\r\n    *\r\n    * @returns The associated store for the given game setting key.\r\n    */\r\n   getReadableStore<T>(key: string): Readable<T> | undefined\r\n   {\r\n      if (!this.#stores.has(key))\r\n      {\r\n         console.warn(`TJSGameSettings - getReadableStore: '${key}' is not a registered setting.`);\r\n         return;\r\n      }\r\n\r\n      const store: MinimalWritable<any> = this.#getStore(key);\r\n\r\n      return { subscribe: store.subscribe };\r\n   }\r\n\r\n   /**\r\n    * Returns a writable Game Settings store for the associated key.\r\n    *\r\n    * @param key - Game setting key.\r\n    *\r\n    * @returns The associated store for the given game setting key.\r\n    */\r\n   getStore<T>(key: string): MinimalWritable<T> | undefined\r\n   {\r\n      return this.getWritableStore<T>(key);\r\n   }\r\n\r\n   /**\r\n    * Returns a writable Game Settings store for the associated key.\r\n    *\r\n    * @param key - Game setting key.\r\n    *\r\n    * @returns The associated store for the given game setting key.\r\n    */\r\n   getWritableStore<T>(key: string): MinimalWritable<T> | undefined\r\n   {\r\n      if (!this.#stores.has(key))\r\n      {\r\n         console.warn(`TJSGameSettings - getWritableStore: '${key}' is not a registered setting.`);\r\n         return;\r\n      }\r\n\r\n      return this.#getStore(key);\r\n   }\r\n\r\n   /**\r\n    * Registers a setting with TJSGameSettings and Foundry core.\r\n    *\r\n    * @param setting - A GameSetting instance to set to Foundry game settings.\r\n    *\r\n    * @param coreConfig - When false this overrides the `setting.options.config` parameter when registering the setting\r\n    *        with Foundry. This allows the settings to be displayed in the app itself, but removed from the standard\r\n    *        Foundry configuration location.\r\n    */\r\n   register(setting: TJSGameSettings.Options.GameSetting<ExtraProps>, coreConfig: boolean = true): void\r\n   {\r\n      if (!isObject(setting))\r\n      {\r\n         throw new TypeError(`TJSGameSettings - register: setting is not an object.`);\r\n      }\r\n\r\n      if (!isObject(setting.options))\r\n      {\r\n         throw new TypeError(`TJSGameSettings - register: 'setting.options' attribute is not an object.`);\r\n      }\r\n\r\n      if (typeof coreConfig !== 'boolean')\r\n      {\r\n         throw new TypeError(`TJSGameSettings - register: 'coreConfig' is not an boolean.`);\r\n      }\r\n\r\n      if (setting.store !== void 0 && !isMinimalWritableStore(setting.store))\r\n      {\r\n         throw new TypeError(\r\n          `TJSGameSettings - register: 'setting.store' attribute is not a minimal writable store.`);\r\n      }\r\n\r\n      const namespace: string = setting.namespace ?? this.#namespace;\r\n      const key: string = setting.key;\r\n\r\n      // The `config` parameter passed to Foundry core.\r\n      const foundryConfig: boolean = coreConfig ? setting.options.config ?? true : false;\r\n\r\n      if (typeof namespace !== 'string')\r\n      {\r\n         throw new TypeError(`TJSGameSettings - register: 'namespace' attribute is not a string.`);\r\n      }\r\n\r\n      if (typeof key !== 'string')\r\n      {\r\n         throw new TypeError(`TJSGameSettings - register: 'key' attribute is not a string.`);\r\n      }\r\n\r\n      const store: MinimalWritable<any> | undefined = setting.store;\r\n\r\n      const options: TJSGameSettings.Options.CoreSetting = setting.options;\r\n\r\n      const onchangeFunctions: Function[] = [];\r\n\r\n      // When true prevents local store subscription from a loop when values are object data.\r\n      let gateSet: boolean = false;\r\n\r\n      // Provides an `onChange` callback to update the associated store.\r\n      onchangeFunctions.push((value: any): void =>\r\n      {\r\n         const callbackStore: MinimalWritable<any> = this.#getStore(key);\r\n         if (callbackStore && !gateSet)\r\n         {\r\n            gateSet = true;\r\n            callbackStore.set(value);\r\n            gateSet = false;\r\n         }\r\n      });\r\n\r\n      // Handle loading any existing `onChange` callbacks.\r\n      if (isIterable(options?.onChange))\r\n      {\r\n         for (const entry of options.onChange)\r\n         {\r\n            if (typeof entry === 'function') { onchangeFunctions.push(entry); }\r\n         }\r\n      }\r\n      else if (typeof options.onChange === 'function')\r\n      {\r\n         onchangeFunctions.push(options.onChange);\r\n      }\r\n\r\n      // Provides the final onChange callback that iterates over all the stored onChange callbacks.\r\n      const onChange: (value: unknown) => void = (value: any): void =>\r\n      {\r\n         for (const entry of onchangeFunctions) { entry(value); }\r\n      };\r\n\r\n      // @ts-expect-error PF2E types do not have partial aspects for `name`.\r\n      globalThis.game.settings.register(namespace, key, { ...options, config: foundryConfig, onChange });\r\n\r\n      // Set new store value with existing setting or default value.\r\n      const targetStore: MinimalWritable<any> = store ? store : this.#getStore(key,\r\n       globalThis.game.settings.get(namespace, key));\r\n\r\n      // If a store instance is passed into register then initialize it with game settings data.\r\n      if (store)\r\n      {\r\n         this.#stores.set(key, targetStore);\r\n         store.set(globalThis.game.settings.get(namespace, key));\r\n      }\r\n\r\n      const storeHandler: (value: any) => Promise<void> = async (value: any): Promise<void> =>\r\n      {\r\n         if (!gateSet)\r\n         {\r\n            gateSet = true;\r\n            await globalThis.game.settings.set(namespace, key, value);\r\n         }\r\n\r\n         gateSet = false;\r\n      };\r\n\r\n      // Subscribe to self to set associated game setting on updates after verifying that the new value does not match\r\n      // existing game setting.\r\n      subscribeIgnoreFirst(targetStore, storeHandler);\r\n\r\n      // Transfer setting options to data.\r\n      {\r\n         const { store, ...rest } = setting;\r\n\r\n         const gameSettingData: TJSGameSettings.Data.GameSetting<ExtraProps> = Object.assign({}, rest,\r\n          { namespace, key, options }) as TJSGameSettings.Data.GameSetting<ExtraProps>;\r\n\r\n         Object.freeze(gameSettingData);\r\n\r\n         this.#settings.push(gameSettingData);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Registers multiple settings.\r\n    *\r\n    * @param settings - An iterable list of game setting configurations to register.\r\n    *\r\n    * @param coreConfig - When false this overrides the `setting.options.config` parameter when registering the setting\r\n    *        with Foundry. This allows the settings to be displayed in the app itself, but removed from the standard\r\n    *        Foundry configuration location.\r\n    *\r\n    * @returns An object containing all TJSGameSetting store subscriber handlers for each setting `key` added.\r\n    */\r\n   registerAll(settings: Iterable<TJSGameSettings.Options.GameSetting<ExtraProps>>, coreConfig?: boolean): void\r\n   {\r\n      if (!isIterable(settings)) { throw new TypeError(`TJSGameSettings - registerAll: settings is not iterable.`); }\r\n\r\n      for (const entry of settings)\r\n      {\r\n         if (!isObject(entry))\r\n         {\r\n            throw new TypeError(`TJSGameSettings - registerAll: entry in settings is not an object.`);\r\n         }\r\n\r\n         if (typeof entry.namespace !== 'string')\r\n         {\r\n            throw new TypeError(`TJSGameSettings - registerAll: entry in settings missing 'namespace' attribute.`);\r\n         }\r\n\r\n         if (typeof entry.key !== 'string')\r\n         {\r\n            throw new TypeError(`TJSGameSettings - registerAll: entry in settings missing 'key' attribute.`);\r\n         }\r\n\r\n         if (!isObject(entry.options))\r\n         {\r\n            throw new TypeError(`TJSGameSettings - registerAll: entry in settings missing 'options' attribute.`);\r\n         }\r\n\r\n         this.register(entry, coreConfig);\r\n      }\r\n   }\r\n\r\n   // Iterators ------------------------------------------------------------------------------------------------------\r\n\r\n   /**\r\n    * Returns an iterable for the game setting data; {@link TJSGameSettings.Data.GameSetting}.\r\n    *\r\n    * @param [regex] - Optional regular expression to filter by game setting keys.\r\n    *\r\n    * @returns Iterable iterator of `TJSGameSettings.Data.GameSetting`.\r\n    */\r\n   *data(regex: RegExp | undefined = void 0): IterableIterator<TJSGameSettings.Data.GameSetting<ExtraProps>>\r\n   {\r\n      if (regex !== void 0 && !CrossWindow.isRegExp(regex)) { throw new TypeError(`'regex' is not a RegExp`); }\r\n\r\n      if (!this.#settings.length) { return void 0; }\r\n\r\n      if (regex)\r\n      {\r\n         for (const setting of this.#settings)\r\n         {\r\n            if (regex.test(setting.key)) { yield setting; }\r\n         }\r\n      }\r\n      else\r\n      {\r\n         for (const setting of this.#settings) { yield setting; }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Returns an iterable for the game setting keys and stores.\r\n    *\r\n    * @param [regex] - Optional regular expression to filter by game setting keys.\r\n    *\r\n    * @typeParam T - Store data type.\r\n    *\r\n    * @returns Iterable iterator of keys and stores.\r\n    */\r\n   *entries<T>(regex: RegExp | undefined = void 0): IterableIterator<[string, MinimalWritable<T>]>\r\n   {\r\n      if (regex !== void 0 && !CrossWindow.isRegExp(regex)) { throw new TypeError(`'regex' is not a RegExp`); }\r\n\r\n      if (!this.#stores.size) { return void 0; }\r\n\r\n      if (regex)\r\n      {\r\n         for (const key of this.#stores.keys())\r\n         {\r\n            if (regex.test(key)) { yield [key, this.getStore<T>(key) as MinimalWritable<T>]; }\r\n         }\r\n      }\r\n      else\r\n      {\r\n         for (const key of this.#stores.keys()) { yield [key, this.getStore<T>(key) as MinimalWritable<T>]; }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Returns an iterable for the game setting keys from existing stores.\r\n    *\r\n    * @param [regex] - Optional regular expression to filter by game setting keys.\r\n    *\r\n    * @returns Iterable iterator of game setting keys.\r\n    */\r\n   *keys(regex: RegExp | undefined = void 0): IterableIterator<string>\r\n   {\r\n      if (regex !== void 0 && !CrossWindow.isRegExp(regex)) { throw new TypeError(`'regex' is not a RegExp`); }\r\n\r\n      if (!this.#stores.size) { return void 0; }\r\n\r\n      if (regex)\r\n      {\r\n         for (const key of this.#stores.keys())\r\n         {\r\n            if (regex.test(key)) { yield key; }\r\n         }\r\n      }\r\n      else\r\n      {\r\n         for (const key of this.#stores.keys()) { yield key; }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Returns an iterable for the game setting stores.\r\n    *\r\n    * @param [regex] - Optional regular expression to filter by game setting keys.\r\n    *\r\n    * @returns Iterable iterator of stores.\r\n    */\r\n   *stores<T>(regex: RegExp | undefined = void 0): IterableIterator<MinimalWritable<T>>\r\n   {\r\n      if (regex !== void 0 && !CrossWindow.isRegExp(regex)) { throw new TypeError(`'regex' is not a RegExp`); }\r\n\r\n      if (!this.#stores.size) { return void 0; }\r\n\r\n      if (regex)\r\n      {\r\n         for (const key of this.#stores.keys())\r\n         {\r\n            if (regex.test(key)) { yield this.getStore(key) as MinimalWritable<T>; }\r\n         }\r\n      }\r\n      else\r\n      {\r\n         for (const key of this.#stores.keys()) { yield this.getStore(key) as MinimalWritable<T>; }\r\n      }\r\n   }\r\n}\r\n\r\ndeclare namespace TJSGameSettings\r\n{\r\n   export namespace Data {\r\n      /**\r\n       * Stores the primary TJS game setting keys w/ GameSettingOptions.\r\n       */\r\n      export interface GameSettingBase {\r\n         /**\r\n          * The setting key to register.\r\n          */\r\n         key: string;\r\n\r\n         /**\r\n          * The setting namespace; usually the ID of the package. If not provided the associated namespace with the\r\n          * instance of `TJSGameSettings` will be used.\r\n          */\r\n         namespace: string;\r\n\r\n         /**\r\n          * Core game setting configuration options.\r\n          */\r\n         options: Options.CoreSetting;\r\n      }\r\n\r\n      /**\r\n       * Defines the parsed game setting data with potential extra props.\r\n       */\r\n      export type GameSetting<ExtraProps extends Record<string, any> = {}> = GameSettingBase & ExtraProps;\r\n   }\r\n\r\n   export namespace Options {\r\n      /**\r\n       * Defines the core Foundry options for a game setting.\r\n       */\r\n      export interface CoreSetting {\r\n         /**\r\n          * If choices are defined, the resulting setting will be a select menu and `type` must be a `string`.\r\n          */\r\n         choices?: Record<string, string>;\r\n\r\n         /**\r\n          * Specifies that the setting appears in the configuration view; default: `true`.\r\n          */\r\n         config?: boolean;\r\n\r\n         /**\r\n          * A default value for the setting.\r\n          */\r\n         default: number | string | boolean | object;\r\n\r\n         /**\r\n          * Setting is a file picker and `type` must be a `string`. You may use a boolean for `any` file type or\r\n          * select a specific file type.\r\n          */\r\n         filePicker?: boolean | 'any' | 'audio' | 'folder' | 'font' | 'image' | 'imagevideo' | 'text' | 'video';\r\n\r\n         /**\r\n          * A description of the registered setting and its behavior.\r\n          */\r\n         hint?: string;\r\n\r\n         /**\r\n          * The displayed name of the setting.\r\n          */\r\n         name?: string;\r\n\r\n         /**\r\n          * An onChange callback function or iterable list of callbacks to directly receive callbacks from Foundry on\r\n          * setting change.\r\n          */\r\n         onChange?: Function | Iterable<Function>;\r\n\r\n         /**\r\n          * If range is specified, the resulting setting will be a range slider.\r\n          */\r\n         range?: { min: number; max: number; step?: number };\r\n\r\n         /**\r\n          * If true then a prompt to reload after changes occurs; default: `false`.\r\n          */\r\n         requiresReload?: boolean;\r\n\r\n         /**\r\n          * Scope for setting. `client` uses local storage and `world` is saved in Foundry DB.\r\n          */\r\n         scope: 'client' | 'world';\r\n\r\n         /**\r\n          * A constructable object, function, or DataModel.\r\n          */\r\n         type: NumberConstructor | StringConstructor | BooleanConstructor | ObjectConstructor | ArrayConstructor |\r\n          (new (...args: any[]) => fvtt.DataModel) | ((data: unknown) => unknown);\r\n      }\r\n\r\n      /**\r\n       * Defines a game setting.\r\n       */\r\n      export interface GameSettingBase {\r\n         /**\r\n          * The setting key to register.\r\n          */\r\n         key: string;\r\n\r\n         /**\r\n          * Core game setting configuration options.\r\n          */\r\n         options: Options.CoreSetting;\r\n\r\n         /**\r\n          * The setting namespace; usually the ID of the package. If not provided the associated namespace with the\r\n          * instance of `TJSGameSettings` will be used.\r\n          */\r\n         namespace?: string;\r\n\r\n         /**\r\n          * An existing store instance to use.\r\n          */\r\n         store?: MinimalWritable<any>;\r\n      }\r\n\r\n      /**\r\n       * Defines the game setting options with potential extra props.\r\n       */\r\n      export type GameSetting<ExtraProps extends Record<string, any> = {}> = GameSettingBase & ExtraProps;\r\n   }\r\n}\r\n\r\nexport { TJSGameSettings };\r\n","import { CrossWindow }           from '#runtime/util/browser';\r\n\r\nimport { TJSGameSettings }       from './TJSGameSettings';\r\n\r\nimport type {\r\n   Subscriber,\r\n   Unsubscriber }                from 'svelte/store';\r\n\r\nimport type { MinimalWritable }  from '#runtime/svelte/store/util';\r\n\r\n/**\r\n * Provides an accessible JS object that is updated reactively from all or subset of TJSGameSettings stores.\r\n * Accessors are provided to directly get / set current setting data. Using a setter will update the setting and backing\r\n * store.\r\n *\r\n * TJSLiveGameSettings is also a readable Svelte store essentially providing a customizable derived store of all\r\n * settings tracked.\r\n *\r\n * Note: You can create a JSDoc / `@typedef` to apply with `@type` and achieve typing support in IDEs for the\r\n * customizable live settings instance. Please see the example at the end of this source file on how to accomplish this\r\n * task.\r\n *\r\n * Note: Presently `TJSLiveGameSettings` is openly typed, but there will be a TypeScript friendly way to strongly type\r\n * additional instance properties.\r\n *\r\n * Note: When using from JS a second subscriber function argument is the key that was updated.\r\n * From Svelte: Use 'lastKey' accessor to retrieve the last updated key.\r\n *\r\n * Note: In the future this class will be reworked w/ Svelte 5 state handling.\r\n *\r\n * @example\r\n * ```js\r\n * // Example of creating a typedef to type your specific live game settings instance. Add all relevant `@property`\r\n * // entries.\r\n *\r\n * /**\r\n *  * @typedef {TJSLiveGameSettings} MyLiveGameSettings - Extend TJSLiveGameSettings and name this anything.\r\n *  *\r\n *  * @property {boolean} myBooleanSetting - Add property / type entries for setting keys associated w/ accessors.\r\n *  *\\/\r\n *\r\n * /** @type {MyLiveGameSettings} *\\/\r\n * const liveGameSettings = new TJSLiveGameSettings(gameSettings);\r\n * liveGameSettings.myBooleanSetting is now typed as a boolean.\r\n * ```\r\n */\r\nexport class TJSLiveGameSettings\r\n{\r\n   [key: string]: any;\r\n\r\n   /**\r\n    * Stores the current parsed game setting data.\r\n    */\r\n   #currentData: { [key: string]: unknown } = {};\r\n\r\n   /**\r\n    * Map of all game settings stores and unsubscribe functions currently subscribed.\r\n    */\r\n   #gameSettings: Map<string, { unsubscribe: Function, store: MinimalWritable<unknown> }> = new Map();\r\n\r\n   /**\r\n    * Stores readable subscribers of this instance.\r\n    *\r\n    * Note: When using from JS a second argument is the key that was updated.\r\n    * From Svelte: Use 'lastKey' accessor to retrieve the last updated key.\r\n    */\r\n   #subscribers: ((value: TJSLiveGameSettings, key?: string) => void)[] = [];\r\n\r\n   /**\r\n    * Stores the last updated key.\r\n    */\r\n   #lastKey: string | undefined = void 0;\r\n\r\n   /**\r\n    * Creates a live binding against the setting stores. All settings are configured by default, but can also be\r\n    * filtered by setting key with inclusive / exclusive Sets.\r\n    *\r\n    * @param gameSettings - A game settings instance to subscribe to...\r\n    *\r\n    * @param [options] - TJSLiveGameSettings options.\r\n    *\r\n    * @param [options.include] - A Set of setting keys to include from subscribing.\r\n    *\r\n    * @param [options.exclude] - A Set of setting keys to exclude from subscribing.\r\n    */\r\n   constructor(gameSettings: TJSGameSettings, { include, exclude }:\r\n    { include?: Set<string>, exclude?: Set<string> } = {})\r\n   {\r\n      if (!(gameSettings instanceof TJSGameSettings))\r\n      {\r\n         throw new TypeError(`'gameSettings' is not a TJSGameSettings instance.`);\r\n      }\r\n\r\n      if (include !== void 0 && !CrossWindow.isSet(include)) { throw new TypeError(`'options.include' is not a Set.`); }\r\n      if (exclude !== void 0 && !CrossWindow.isSet(exclude)) { throw new TypeError(`'options.exclude' is not a Set.`); }\r\n\r\n      for (const setting of gameSettings.data())\r\n      {\r\n         const key: string = setting.key;\r\n\r\n         // Skip any keys that are in the include set.\r\n         if (include !== void 0 && !include.has(key)) { continue; }\r\n\r\n         // Skip any keys that are in the exclude set.\r\n         if (exclude !== void 0 && exclude.has(key)) { continue; }\r\n\r\n         if (typeof this[key] === 'function' || key === 'lastKey')\r\n         {\r\n            console.warn(`TJSLiveGameSettings warning: key (${key}) shadows a function. Skipping key.`);\r\n         }\r\n\r\n         const store: MinimalWritable<unknown> | undefined = gameSettings.getStore(key);\r\n\r\n         if (!store) { continue; }\r\n\r\n         // Update this instance storing setting data by key.\r\n         this.#gameSettings.set(key, {\r\n            store,\r\n            unsubscribe: store.subscribe((data: unknown): void =>\r\n            {\r\n               if (this.#currentData !== void 0) { this.#currentData[key] = data; }\r\n\r\n               this.#lastKey = key;\r\n\r\n               // Notify any child instance that a particular key has updated.\r\n               this._update(key);\r\n\r\n               // Notify any readable store subscribers.\r\n               this.#updateSubscribers(key);\r\n            })\r\n         });\r\n\r\n         // Define new accessors for setting key.\r\n         Object.defineProperty(this, key, {\r\n            get: (): unknown =>\r\n            {\r\n               if (this.#currentData === void 0)\r\n               {\r\n                  throw new Error(`This instance of TJSLiveGameSettings has been destroyed.`);\r\n               }\r\n               else\r\n               {\r\n                  return this.#currentData[key];\r\n               }\r\n            },\r\n            set: (data: any): void =>\r\n            {\r\n               if (this.#currentData === void 0)\r\n               {\r\n                  throw new Error(`This instance of TJSLiveGameSettings has been destroyed.`);\r\n               }\r\n               else\r\n               {\r\n                  this.#gameSettings.get(key)?.store.set(data);\r\n               }\r\n            }\r\n         });\r\n      }\r\n\r\n      Object.seal(this);\r\n   }\r\n\r\n   /**\r\n    * @returns Last updated setting key.\r\n    */\r\n   get lastKey(): string | undefined\r\n   {\r\n      return this.#lastKey;\r\n   }\r\n\r\n   // ----------------------------------------------------------------------------------------------------------------\r\n\r\n   /**\r\n    * Destroys this instance of TJSLiveGameSettings and unsubscribes from all game setting stores.\r\n    */\r\n   destroy(): void\r\n   {\r\n      for (const data of this.#gameSettings.values())\r\n      {\r\n         if (typeof data.unsubscribe === 'function') { data.unsubscribe(); }\r\n      }\r\n\r\n      this.#gameSettings.clear();\r\n      this.#currentData = {};\r\n   }\r\n\r\n   /**\r\n    * Returns an iterator / generator of all setting entries.\r\n    *\r\n    * @returns An iterator returning setting entries.\r\n    */\r\n   *entries(): IterableIterator<[key: string, value: any]>\r\n   {\r\n      if (this.#currentData === void 0) { throw new Error(`This instance of TJSLiveGameSettings has been destroyed.`); }\r\n\r\n      for (const key in this.#currentData)\r\n      {\r\n         yield [key, this.#currentData[key]];\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Returns an iterator / generator of all setting keys.\r\n    *\r\n    * @returns An iterator returning setting keys.\r\n    */\r\n   *keys(): IterableIterator<string>\r\n   {\r\n      if (this.#currentData === void 0) { throw new Error(`This instance of TJSLiveGameSettings has been destroyed.`); }\r\n\r\n      for (const key in this.#currentData)\r\n      {\r\n         yield key;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Returns a string / JSON stringify of the current setting data.\r\n    *\r\n    * @returns Tracked setting data.\r\n    */\r\n   toString(): string\r\n   {\r\n      if (this.#currentData === void 0) { throw new Error(`This instance of TJSLiveGameSettings has been destroyed.`); }\r\n\r\n      return JSON.stringify(this.#currentData);\r\n   }\r\n\r\n   /**\r\n    * Override to respond to setting update.\r\n    *\r\n    * @param key - The setting / local key that updated.\r\n    */\r\n   protected _update(key: string): void {}   // eslint-disable-line no-unused-vars\r\n\r\n   /**\r\n    * Returns an iterator / generator of all values.\r\n    *\r\n    * @returns An iterator returning setting values.\r\n    */\r\n   *values(): IterableIterator<any>\r\n   {\r\n      if (this.#currentData === void 0) { throw new Error(`This instance of TJSLiveGameSettings has been destroyed.`); }\r\n\r\n      for (const key in this.#currentData)\r\n      {\r\n         yield this.#currentData[key];\r\n      }\r\n   }\r\n\r\n   // Readable store implementation ----------------------------------------------------------------------------------\r\n\r\n   /**\r\n    * @param handler - Callback function that is invoked on update / changes.\r\n    *\r\n    * @returns Unsubscribe function.\r\n    */\r\n   subscribe(handler: (value: TJSLiveGameSettings, key?: string) => void): Unsubscriber\r\n   {\r\n      this.#subscribers.push(handler); // add handler to the array of subscribers\r\n\r\n      handler(this, void 0);             // call handler with current value\r\n\r\n      // Return unsubscribe function.\r\n      return (): void =>\r\n      {\r\n         const index: number = this.#subscribers.findIndex((sub: Subscriber<any>): boolean => sub === handler);\r\n         if (index >= 0) { this.#subscribers.splice(index, 1); }\r\n      };\r\n   }\r\n\r\n   /**\r\n    * Updates subscribers.\r\n    *\r\n    * @param key - The key that was updated.\r\n    */\r\n   #updateSubscribers(key: string): void\r\n   {\r\n      for (let cntr: number = 0; cntr < this.#subscribers.length; cntr++) { this.#subscribers[cntr](this, key); }\r\n   }\r\n}\r\n"],"names":[],"mappings":"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"}